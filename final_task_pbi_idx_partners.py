# -*- coding: utf-8 -*-
"""Final_Task_PBI_IDX Partners.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mIu4nW4y3SPHoq9DfdWLZZsBLqT4rKNO

Melakukan import terhadap library yang dibutuhkan dalam kegiatan analisis data.
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline

"""Loading Data Dan Melihat Data yang ingin Di analisis"""

df = pd.read_csv('/content/drive/MyDrive/Dataset_Collab/loan_data_2007_2014.csv', low_memory=False)
pd.set_option('display.max_columns', None)
df.head(5)

"""melihat info yang ada didalam dataset dan melihat kelengkapan dan jumlah kolom yang ada pada dataset."""

df.info()

"""menghapus fitur-fitur yang dianggap tidak berguna atau tidak diperlukan untuk analisis data saat ini dan menyimpan dataset hasil filter kedalam variable yang baru."""

df_drop =[0,1,2,11,19,20,24,29,30,48,51,54,55,56,60,61,62,63,64,65,66,67,68,69,70,72,73,74]
df_filtered = df.drop(df.columns[df_drop],axis=1)
df_filtered.head()

df_filtered.info()

"""Melihat nilai unik yang ada didalam feature loan_Status yang akan di jadikan label dalam analisis kali ini."""

df_filtered['loan_status'].unique()

"""Kemudian kmai merename kolom kolom yang ada agar kolom lebih mudah untuk dimengerti"""

df_ubah = df_filtered.rename(columns={'loan_amnt':'pinjaman_diterima_bLalu','funded_amnt':'pinjaman_disetujui','term':'tenor_pinjaman',
                             'installment':'pembayaran_bulanan','emp_length':'lama_bekerja','home_ownership':'kepemilikan_properti','annual_inc':'pendapatan_tahunan',
                             'verification_status':'status_verifikasi','issue_d':'bulan_pinjaman_diberikan','loan_status':'status_pinjaman',
                             'purpose':'tujuan_pinjaman','title':'nama_pinjaman','delinq_2yrs':'keterlambatan_2thn','dti':'rasio_bayar_bulanan',
                             'earliest_cr_line':'bulan_pembukaan_rekening','inq_last_6mths':'pertanyaan_cr_6bln','open_acc':'akun_kredit_aktif',
                             'pub_rec':'catatan_negatif_publik','revol_bal':'putaran_saldo','revol_util':'rasio_penggunaan_saldo','total_acc':'total_akun_kredit',
                             'initial_list_status':'status_penawaran_pinjaman','out_prncp':'sisa_pokok_pendanaan','out_prncp_inv':'sisa_pokok_pendanaan_inv',
                             'total_pymnt':'total_pembayaran','total_pymnt_inv':'total_pembayaran_inv','total_rec_prncp':'total_pokok_diterima',
                             'total_rec_int':'total_bunga','total_rec_late_fee':'total_bunga_terlambat','recoveries':'perlakuan_rencana_pembayaran',
                             'collection_recovery_fee':'biaya_charge_off','last_pymnt_d':'pembayaran_terakhir','last_pymnt_amnt':'jumlah_pembayaran_terakhir',
                             'total_rev_hi_lim':'limit_kredit_tertinggi','tot_cur_bal':'total_saldo_akun','tot_coll_amt':'total_hutang_tertunggak',
                              'last_credit_pull_d':'last_cek_hisKredit','collections_12_mths_ex_med':'usaha_penagihan_12bln','acc_now_delinq':'rekening_menunggak'})
df_ubah.head(5)

df_ubah = df_ubah.dropna(subset=['lama_bekerja'])
df_ubah['lama_bekerja'].isnull().sum()

df_ubah = df_ubah.dropna(subset=['limit_kredit_tertinggi'])
df_ubah['limit_kredit_tertinggi'].isnull().sum()

label_encoder = LabelEncoder()
df_ubah['lama_bekerja'] = label_encoder.fit_transform(df_ubah['lama_bekerja'])
df_ubah['status_verifikasi'] = label_encoder.fit_transform(df_ubah['status_verifikasi'])
df_ubah['kepemilikan_properti'] = label_encoder.fit_transform(df_ubah['kepemilikan_properti'])
df_ubah['grade'] = label_encoder.fit_transform(df_ubah['grade'])
df_ubah['status_pinjaman']=  label_encoder.fit_transform(df_ubah['status_pinjaman'])
df_ubah['pymnt_plan']=  label_encoder.fit_transform(df_ubah['pymnt_plan'])

df_ubah['zip_code'] = df_ubah['zip_code'].str.replace('xx', '')

"""## **Explanatory Data Analysis (EDA)**"""

X = df_ubah[['zip_code','lama_bekerja','policy_code','pendapatan_tahunan','grade','kepemilikan_properti','pinjaman_disetujui',
             'status_verifikasi','rekening_menunggak','keterlambatan_2thn','usaha_penagihan_12bln','catatan_negatif_publik',
             'total_hutang_tertunggak','perlakuan_rencana_pembayaran','pymnt_plan','akun_kredit_aktif','total_akun_kredit',
             'putaran_saldo']]
y = df_ubah[['status_pinjaman']]

X.info()

y.info()

X.head()

y.head()

"""## **Splitting Data**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=123)

X_train.drop(columns=['status_pinjaman'],axis=1, inplace=True)

scaler = MinMaxScaler()

X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

X_train

"""## **Modelling Data**"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn import metrics

RF = RandomForestClassifier(n_estimators=25, random_state=42)
RF.fit(X_train, y_train)
ypred = RF.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test,ypred))

print("Random Forest Model")
print("-------------------------------------------------------------")
print("Precision:",metrics.precision_score(y_test,ypred,average='micro'))
print("Recall:",metrics.recall_score(y_test,ypred,average='micro'))
print("F Score:",metrics.f1_score(y_test,ypred,average='micro'))
print("Confusion Matrix:\n",metrics.confusion_matrix(y_test,ypred))
print (metrics.classification_report(y_test, ypred))
print("-------------------------------------------------------------")